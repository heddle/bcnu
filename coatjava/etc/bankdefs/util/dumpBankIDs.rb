#!/usr/bin/env ruby
#
# Dumps the bank names and ID information for all JSON files in specified directory
#

require 'json'

if ARGV.empty?
  puts """
  USAGE: #{$0} [DIRECTORY]

  Dumps the bank names and ID information for all JSON files in [DIRECTORY]
  """
  exit 2
end
SpecDir = ARGV[0]

# parse the JSON files
specs = Dir.glob(File.join SpecDir, '*.json').map do |spec_file_name|
  JSON.parse File.read(spec_file_name)
end.flatten

# check if each spec has the required keys
specs.each do |spec|
  ['name', 'group', 'item', 'info'].each do |key|
    unless spec.has_key? key
      $stderr.puts "ERROR: missing key '#{key}' in one of the JSON files"
      exit 1
    end
  end
end

# group the specs according to group ID
specs_grouped = Hash.new
specs.each do |spec|
  group_num = spec['group'].to_i
  specs_grouped[group_num] = Array.new unless specs_grouped.has_key? group_num
  specs_grouped[group_num] << spec
end

# sort by group ID
specs_grouped_sorted = specs_grouped.sort_by{|k,v|k}.to_h
# then sort each group's item IDs
specs_fully_sorted = Hash.new
specs_grouped_sorted.each do |group_id, spec_list|
  specs_fully_sorted[group_id] = spec_list.sort do |spec_a, spec_b|
    spec_a['item'].to_i <=> spec_b['item'].to_i
  end
end

# dump a table
puts """# Bank Group and Item IDs

This file was generated by
```bash
#{$0} #{ARGV.join ' '}
```

> [!IMPORTANT]
> Please re-run this script if you modify any of the bank definitions.

"""

def row(cols)
  puts "| #{cols.join ' | '} |"
end
specs_fully_sorted.each do |group_id, spec_list|
  puts "\n## Group #{group_id}\n\n"
  row ['Item ID', 'Name', 'Description']
  row ['---', '---', '---']
  spec_list.each do |spec|
    desc = spec['info'].split.map do |word|
      if word.include? '::'
        "`#{word}`"
          .gsub(')`','`)')
          .gsub('`(','(`')
      else
        word
      end
    end.join(' ')
    row [
      spec['item'],
      '`' + spec['name'] + '`',
      desc,
    ]
  end
end
